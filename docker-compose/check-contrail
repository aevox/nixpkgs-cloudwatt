#!/usr/bin/env bash

set -e

#Compare the number of control nodes in analytics and discovery

echo -e "Compare the number of control nodes in analytics and discovery:"
container=$(curl -s localhost:8500/v1/catalog/service/opencontrail-discovery | jq -r ' .[0].ServiceID | split(":") | .[1] ')
port_discovery=$(docker port $container | grep 5998 | cut -d: -f2)

l1=$(curl -s http://localhost:8081/analytics/uves/control-nodes | jq length)
l2=$(curl -s localhost:$port_discovery/services.json | jq .services[].ep_type | grep xmpp-server | wc -l)
if [ "$l1" -eq "$l2" ]
then
  echo -e "Number of control nodes in analytics is the same in discovery, and they are:\n"
  curl -s http://localhost:8081/analytics/uves/control-nodes | jq .
else
  echo "Number of control nodes is not the same in analytics and discovery, something went wrong in analytics or control."
  exit 1
fi

# create namespaces in each vrouter and check ping between them
vm=1
for vrouter in vrouter-master vrouter
do
  ip="$(curl -s localhost:8500/v1/catalog/service/opencontrail-$vrouter | jq -r .[].ServiceAddress)"
  echo -e "create namespace in vrouter$vm ...\n"
  ssh -q -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" root@$ip "netns-daemon-start -U opencontrail -P development -s api -n default-domain:service:vn1 vm${vm}0"
  ((vm++))
done
#ping from  vrouter-master to vrouter
ip="$(curl -s localhost:8500/v1/catalog/service/opencontrail-vrouter | jq -r .[].ServiceAddress)"
add=$(ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" root@$ip 'ip netns exec ns-vm20 ip a  | grep "inet\b" | awk '\''{print $2}'\'' | cut -d/ -f1')

ip="$(curl -s localhost:8500/v1/catalog/service/opencontrail-vrouter-master | jq -r .[].ServiceAddress)"
echo "ping from vrouter-master to vrouter"
ssh -o "StrictHostKeyChecking no" -o "UserKnownHostsFile /dev/null" root@$ip ip netns exec ns-vm10 ping -c 2 $add  &> /dev/null && echo -e "ping success\n" || echo -e "ping failed\n"

# check the peering of controllers

if [ $(curl -s localhost:8500/v1/catalog/service/opencontrail-control | jq length) != 2 ]
then
  exit 1
fi
echo "check if controllers peering ..."

ip=$(curl -s localhost:8500/v1/catalog/service/opencontrail-control | jq -r .[0].ServiceAddress)
cmd1=$(contrail-introspect-cli controller-route  $ip default-domain:default-project:vn1:vn1)

ip=$(curl -s localhost:8500/v1/catalog/service/opencontrail-control | jq -r .[1].ServiceAddress)
cmd2=$(contrail-introspect-cli controller-route  $ip default-domain:default-project:vn1:vn1)

if [ "$cmd1" = "$cmd2" ] ;
then
  echo -e "Yes, they are \n"
else
  echo -e "No, prefix routes in the different controllers are not the same\n"
fi

echo "check if api peering ..."

ip=$(curl -s localhost:8500/v1/catalog/service/opencontrail-api | jq -r .[0].ServiceAddress)
cmd1=$(contrail-api-cli -H $ip --os-password development --os-auth-plugin v2password --os-auth-url http://localhost:35357/v2.0   --os-username opencontrail  --os-tenant-name service ls -l virtual-machine)

ip=$(curl -s localhost:8500/v1/catalog/service/opencontrail-api | jq -r .[1].ServiceAddress)
cmd2=$(contrail-api-cli -H $ip --os-password development --os-auth-plugin v2password --os-auth-url http://localhost:35357/v2.0   --os-username opencontrail  --os-tenant-name service ls -l virtual-machine)

if [ "$cmd1" = "$cmd2" ] ;
then
  echo -e "Yes, they are\n"
else
  echo -e "No, ressources in the different api are not the same\n"
fi
